7.2 
  单向散列函数，就是一种采集文件“指纹”的技术，单向散列函数所生成的散列值，就相当于消息的“指纹”。

  7.2.2 什么是单向散列函数
  同一款单向散列函数输出的散列值的长度是固定的，无论输入是长是短，输出的长度始终一样长。
  
  7.2.3 单向散列函数的性质
  - 根据任意长度的消息计算出固定长度的散列值
  - 能够快速计算出散列值
  - 消息不同散列值也不同 —— 具备抗碰撞性 —— 并且是强抗碰撞性（也就是要找到散列值相同的两条不同的消息是十分困难的）
  - 具备单向性
  
  ****
  PS 单向散列函数也成为 哈希函数
  ****
  
7.3 单向散列函数的实际应用
  
  7.3.1 检测软件是否被篡改
  很多软件，尤其是安全相关的软件都会把通过单向散列函数计算出的散列值公布在自己的官方网站上 用户在下载到软件之后，可以自行计算散列值，
  然后与官方网站上公布的散列值进行对比 通过散列值，用户可以确认自己所下载到的文件与软件作者所提供的文件是否被篡改。
  这样的方法，在可以通过多种途径得到软件的情况下非常有用 为了减轻服务器的压力，很多软件作者都会借助多个网站（镜像站点）来发布软件，
  在这种情况下，单向散列函数就会在检测软件是否被篡改方面发挥重要作用
  
  7.3.2 基于口令的加密
  
  7.3.3 消息认证码
  
  7.3.4 数字签名
  
  7.3.5 伪随机数生成器
  
  7.3.6 一次性口令
  
7.4 单向散列函数的具体例子
  
  7.4.1 MD4 MD5
  
  7.4.2 SHA-1 SHA-256 SHA-384 SHA-512
  
  7.4.3 RIPEMD-160 

  7.4.4 SHA-3 —— Keccak 算法
  
7.9 单向散列函数无法解决的问题
  例如，假设主动攻击者 Mallory 伪装成 Alice, Bob 同时发送了消息和散列值 这时 Bob
能够通过单向散列函数检查消息的完整性，但是这只是对 Mallory 发送的消息进行检查，而无
法检查出发送者的身份是否被 Mallory 进行了伪装 也就是说，单向散列函数能够辨别出“篡
改＂，但无法辨别出 “伪装”当我们不仅需要确认文件的完整性，同时还需要确认这个文件是否真的属千 Allic 时，仅靠完整性检查是不够的，需要进行 --认证--


